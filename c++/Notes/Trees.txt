### Tree Data Structure Cheat Sheet üöÄ

#### 1Ô∏è‚É£ Basics
- **Node**: Fundamental unit of a tree
- **Root**: Topmost node
- **Parent & Child**: Relationship between nodes
- **Leaf**: Node with no children
- **Height**: Longest path from node to leaf
- **Depth**: Distance from root
- **Subtree**: Any node with its descendants

#### 2Ô∏è‚É£ Types of Trees
- **Binary Tree**: Each node has ‚â§ 2 children
- **Binary Search Tree (BST)**: Left < Root < Right
- **Balanced Trees**: AVL, Red-Black Tree
- **Heap**: Min Heap, Max Heap
- **Trie (Prefix Tree)**: Efficient for string operations
- **Segment Tree / Fenwick Tree (BIT)**: Used for range queries

#### 3Ô∏è‚É£ Tree Traversals
- **DFS (Depth-First Search)**:
  - **Inorder (L ‚Üí Root ‚Üí R)**
  - **Preorder (Root ‚Üí L ‚Üí R)**
  - **Postorder (L ‚Üí R ‚Üí Root)**
- **BFS (Breadth-First Search)**:
  - **Level Order Traversal**

#### 4Ô∏è‚É£ Important Problems
- Find **Height & Depth** of a tree
- Compute **Lowest Common Ancestor (LCA)**
- Find **Diameter of the tree**
- **Check if a tree is balanced**
- **Serialize & Deserialize a tree**
- Find **K-th Smallest Element in BST**
- **Zigzag Traversal** of a tree
- **Construct a Tree** from given traversals

#### 5Ô∏è‚É£ Advanced Topics
- **Morris Traversal** (Tree traversal without recursion/stack)
- **Segment Tree & Fenwick Tree (BIT)** for efficient range queries
- **Graph Relationship**: A tree is a special type of graph

#### 6Ô∏è‚É£ Problem-Solving Approach
‚úÖ Understand the problem statement
‚úÖ Identify the type of tree
‚úÖ Choose the correct traversal technique
‚úÖ Use recursion or an iterative approach
‚úÖ Optimize using tree properties

üî• Master these concepts to crack tree-based problems efficiently! üöÄ